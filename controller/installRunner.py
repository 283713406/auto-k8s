#!/usr/bin/env python3
# encoding: utf-8

import os
import sys
import shutil
import json
import ansible_runner
import collections
import logging
from kubernetes import client, config

'''
playbookBasePath: The folder where the playbooks is located.
privateDataDir: The folder where the playbooks execution results are located.
configFile: Define the parameters in the installation process. Generated by cluster configuration
statusFile: Define the status in the installation process.
'''
playbookBasePath = '/kylincloud/playbooks'
privateDataDir = '/kylincloud/results'
configFile = '/kylincloud/config/config.json'
statusFile = '/kylincloud/config/status.json'

logging.basicConfig(level=logging.INFO, format="%(message)s")

kcan_hook = '''
{
	"onKubernetesEvent": [{
		"name": "Monitor clusterconfiguration",
		"kind": "InstallerConfiguration",
		"event": [ "add", "update" ],
		"objectName": "kcan",
		"namespaceSelector": {
			"matchNames": ["kylincloud-system"]
		},
		"jqFilter": ".spec",
		"allowFailure": false
	}]
}
'''

cluster_configuration = {
    "apiVersion": "kcan.kylincloud.io/v1alpha1",
    "kind": "InstallerConfiguration",
    "metadata": {
        "name": "kcan",
        "namespace": "kylincloud-system",
        "labels": {
            "version": "v1.0.0"
        },
    },
}

# Define components to install


class component():

    def __init__(
            self,
            playbook,
            private_data_dir,
            artifact_dir,
            ident,
            quiet,
            rotate_artifacts):
        '''
        :param private_data_dir: The directory containing all runner metadata needed to invoke the runner
                                 module. Output artifacts will also be stored here for later consumption.
        :param ident: The run identifier for this invocation of Runner. Will be used to create and name
                      the artifact directory holding the results of the invocation.
        :param playbook: The playbook that will be invoked by runner when executing Ansible.
        :param artifact_dir: The path to the directory where artifacts should live, this defaults to 'artifacts' under the private data dir
        :param quiet: Disable all output
        '''
        self.playbook = playbook
        self.private_data_dir = private_data_dir
        self.artifact_dir = artifact_dir
        self.ident = ident
        self.quiet = quiet
        self.rotate_artifacts = rotate_artifacts

    # Generate ansible_runner objects based on parameters

    def installRunner(self):
        kcan = ansible_runner.run_async(
            playbook=self.playbook,
            private_data_dir=self.private_data_dir,
            artifact_dir=self.artifact_dir,
            ident=self.ident,
            quiet=self.quiet,
            rotate_artifacts=self.rotate_artifacts
        )
        return kcan[1]


# Using the Observer pattern to get the info of task execution

class Subject(object):

    def __init__(self):
        self._observers = []

    def attach(self, observer):
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer):
        try:
            self._observers.remove(observer)
        except ValueError:
            pass

    def notify(self, modifier=None):
        for observer in self._observers:
            if modifier != observer:
                observer.update(self)


class Info(Subject):

    def __init__(self, name=''):
        Subject.__init__(self)
        self.name = name
        self._info = None

    @property
    def info(self):
        return self._info

    @info.setter
    def info(self, value):
        self._info = value
        self.notify()


class InfoViewer:
    def update(self, subject):
        logging.info(u'%s' % (subject.info))


infoGetter = Info('taskInfo')
viewer = InfoViewer()
infoGetter.attach(viewer)


def get_cluster_configuration(api):
    resource = api.get_namespaced_custom_object(
        group="kcan.kylincloud.io",
        version="v1alpha1",
        name="kcan",
        namespace="kylincloud-system",
        plural="installerconfigurations",
    )

    return resource


def create_cluster_configuration(api, resource):
    api.create_namespaced_custom_object(
        group="kcan.kylincloud.io",
        version="v1alpha1",
        namespace="kylincloud-system",
        plural="installerconfigurations",
        body=resource,
    )

    logging.info("Create installer configuration successfully")


def delete_cluster_configuration(api):
    api.delete_namespaced_custom_object(
        group="kcan.kylincloud.io",
        version="v1alpha1",
        name="kcan",
        namespace="kylincloud-system",
        plural="installerconfigurations",
    )

    logging.info("Delete old installer configuration successfully")


def getResultInfo():
    # Execute and add the installation task process
    taskProcessList = []
    tasks = generateTaskLists()
    for taskName, taskObject in tasks.items():
        taskProcess = {}
        infoGetter.info = "Start installing {}".format(taskName)
        taskProcess[taskName] = taskObject.installRunner()
        taskProcessList.append(
            taskProcess
        )

    taskProcessListLen = len(taskProcessList)
    logging.info('*' * 50)
    logging.info('Waiting for all tasks to be completed ...')
    completedTasks = []
    while True:
        for taskProcess in taskProcessList:
            taskName = list(taskProcess.keys())[0]
            result = taskProcess[taskName].rc
            if result is not None and {taskName: result} not in completedTasks:
                infoGetter.info = "task {} status is {}  ({}/{})".format(
                    taskName,
                    taskProcess[taskName].status,
                    len(completedTasks) + 1,
                    len(taskProcessList)
                )
                completedTasks.append({taskName: result})

        if len(completedTasks) == taskProcessListLen:
            break
    logging.info('*' * 50)
    logging.info('Collecting installation results ...')

    # Operation result check
    resultState = False
    for taskResult in completedTasks:
        taskName = list(taskResult.keys())[0]
        taskRC = list(taskResult.values())[0]

        if taskRC != 0:
            resultState = resultState or True
            resultInfoPath = os.path.join(
                privateDataDir,
                str(taskName),
                str(taskName),
                'job_events'
            )
            if os.path.exists(resultInfoPath):
                jobList = os.listdir(resultInfoPath)
                jobList.sort(
                    key=lambda x: int(x.split('-')[0])
                )

                errorEventFile = os.path.join(resultInfoPath, jobList[-2])
                with open(errorEventFile, 'r') as f:
                    failedEvent = json.load(f)
                print("\n")
                print("Task '{}' failed:".format(taskName))
                print('*' * 150)
                print(json.dumps(failedEvent, sort_keys=True, indent=2))
                print('*' * 150)
    return resultState


# Generate a objects list of components


def generateTaskLists():
    # readyToEnabledList []
    # readyToDisableList ['apps', 'bootstrap', 'dbinit', 'glusterfs', 'keepalived', 'mysql', 'nfs', 'nfs-exist', 'nginx-gw', 'postgres', 'repo']
    readyToEnabledList, readyToDisableList = getComponentLists()
    tasksDict = {}
    for taskName in readyToEnabledList:
        playbookPath = os.path.join(playbookBasePath, str(taskName) + '.yaml')
        artifactDir = os.path.join(privateDataDir, str(taskName))
        if os.path.exists(artifactDir):
            shutil.rmtree(artifactDir)

        tasksDict[str(taskName)] = component(
            playbook=playbookPath,
            private_data_dir=privateDataDir,
            artifact_dir=artifactDir,
            ident=str(taskName),
            quiet=True,
            rotate_artifacts=1
        )

    return tasksDict

# Generate a list of components to install based on the configuration file


def getComponentLists():
    readyToEnabledList = []
    readyToDisableList = []
    global configFile

    if os.path.exists(configFile):
        with open(configFile, 'r') as f:
            configs = json.load(f)
        f.close()
    else:
        print("The configuration file does not exist !  {}".format(configFile))
        exit()

    for component, parameters in configs.items():
        if (not isinstance(parameters, str)) or (
                not isinstance(parameters, int)):
            try:
                for j, value in parameters.items():
                    if (j == 'enabled') and (value):
                        readyToEnabledList.append(component)
                        break
                    elif (j == 'enabled') and (value == False):
                        readyToDisableList.append(component)
                        break
            except BaseException:
                pass

    return readyToEnabledList, readyToDisableList


def preInstallTasks():
    preInstallTasks = collections.OrderedDict()
    preInstallTasks['preInstall'] = [
        os.path.join(playbookBasePath, 'preinstall.yaml'),
        os.path.join(privateDataDir, 'preinstall')
    ]

    for task, paths in preInstallTasks.items():
        pretask = ansible_runner.run(
            playbook=paths[0],
            private_data_dir=privateDataDir,
            artifact_dir=paths[1],
            ident=str(task),
            quiet=False
        )
        if pretask.rc != 0:
            exit()


def resultInfo(resultState=False, api=None):
    ks_config = ansible_runner.run(
        playbook=os.path.join(playbookBasePath, 'postinstall.yaml'),
        private_data_dir=privateDataDir,
        artifact_dir=os.path.join(privateDataDir, 'postinstall'),
        ident='config',
        quiet=True
    )

    if ks_config.rc != 0:
        print("Failed to ansible-playbook postinstall.yaml")
        exit()

    result = ansible_runner.run(
        playbook=os.path.join(playbookBasePath, 'result-info.yaml'),
        private_data_dir=privateDataDir,
        artifact_dir=os.path.join(privateDataDir, 'result-info'),
        ident='result',
        quiet=True
    )

    if result.rc != 0:
        print("Failed to ansible-playbook result-info.yaml")
        exit()

    resource = get_cluster_configuration(api)

    if not resultState:
        with open('/kylincloud/playbooks/kylincloud_running', 'r') as f:
            info = f.read()
            logging.info(info)

    telemeter = ansible_runner.run(
        playbook=os.path.join(playbookBasePath, 'telemetry.yaml'),
        private_data_dir=privateDataDir,
        artifact_dir=os.path.join(privateDataDir, 'telemetry'),
        ident='telemetry',
        quiet=True
    )

    if telemeter.rc != 0:
        exit()


def generateConfig(api):

    resource = get_cluster_configuration(api)

    cluster_config = resource['spec']

    api = client.CoreV1Api()
    nodes = api.list_node(_preload_content=False)
    nodesStr = nodes.read().decode('utf-8')
    nodesObj = json.loads(nodesStr)

    cluster_config['nodeNum'] = len(nodesObj["items"])

    try:
        with open(configFile, 'w', encoding='utf-8') as f:
            json.dump(cluster_config, f, ensure_ascii=False, indent=4)
    except BaseException:
        with open(configFile, 'w', encoding='utf-8') as f:
            json.dump({"config": "new"}, f, ensure_ascii=False, indent=4)

    try:
        with open(statusFile, 'w', encoding='utf-8') as f:
            json.dump({"status": resource['status']},
                      f, ensure_ascii=False, indent=4)
    except BaseException:
        with open(statusFile, 'w', encoding='utf-8') as f:
            json.dump({"status": {"enabledComponents": []}},
                      f, ensure_ascii=False, indent=4)

# Migrate cluster configuration


def generate_new_cluster_configuration(api, cluster_confiuration_spec=None):
    global old_cluster_configuration
    upgrade_flag = False
    try:
        old_cluster_configuration = get_cluster_configuration(api)
    except BaseException:
        exit(0)

    cluster_configuration_spec = old_cluster_configuration.get('spec')
    cluster_configuration_status = old_cluster_configuration.get('status')

    if "apps" in cluster_configuration_spec:
        upgrade_flag = False

    if upgrade_flag:
        cluster_configuration["spec"] = cluster_configuration_spec
        if isinstance(cluster_configuration_status, dict) and "clusterId" in cluster_configuration_status:
            cluster_configuration["status"] = {
                "clusterId": cluster_configuration_status["clusterId"]
            }
        delete_cluster_configuration(api)
        create_cluster_configuration(api, cluster_configuration)
        exit(0)


def main():
    if not os.path.exists(privateDataDir):
        os.makedirs(privateDataDir)

    if len(sys.argv) > 1 and sys.argv[1] == "--config":
        print(kcan_hook)
    else:
        config.load_incluster_config()
        api = client.CustomObjectsApi()
        generate_new_cluster_configuration(api)
        generateConfig(api)
        # execute preInstall tasks
        preInstallTasks()
        resultState = getResultInfo()
        resultInfo(resultState, api)


if __name__ == '__main__':
    main()
