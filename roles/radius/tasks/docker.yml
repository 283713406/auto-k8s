---
- name: RADIUS | Add registries dns to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item.name }}$'
    line: "{{ item.ip }} {{ item.name }}"
    state: present
    backup: yes
  with_items: "{{ bootstrap.registries }}"

- name: RADIUS | Check for Docker docker-options.confdocker.yml
  stat:
    path: /etc/systemd/system/docker.service.d/docker-options.conf
  register: docker_options_stat_result

- name: RADIUS | Remove inscure registries in docker-options.conf
  replace:
    path: /etc/systemd/system/docker.service.d/docker-options.conf
    regexp: '--insecure-registry=[a-z]+:[0-9]+'
    replace: ''
    backup: yes
  when:
    - docker_options_stat_result.stat.exists == True

- name: Registry | Init insecure registries
  set_fact:
    insecure_registries: "{{ insecure_registries | default([]) }} + [ '{{item.name}}:{{item.port}}' ]"
  loop: "{{ bootstrap.registries }}"

- name: RADIUS | Check for Docker daemon.json
  stat:
    path: /etc/docker/daemon.json
  register: daemon_stat_result

- name: RADIUS | Create Docker daemon.json
  file: 
    path: /etc/docker/daemon.json
    state: touch
  when: daemon_stat_result.stat.exists == False

- name: RADIUS | Read existing daemon.json
  slurp:
    src: /etc/docker/daemon.json
  register: existing_daemon_content
  when: daemon_stat_result.stat.exists == True

- name: RADIUS | Parsing json
  set_fact:
    existing_daemon: "{{ existing_daemon_content['content'] | b64decode | default({}) }}"
  when: daemon_stat_result.stat.exists == True

- name: RADIUS | Init daemon.json content (if needed)
  set_fact:
    existing_daemon: {}
  when: daemon_stat_result.stat.exists == False or existing_daemon|length==0

- name: Registry | Gather existing insecure-registries
  set_fact:
    existing_insecure_registries: "{{ existing_daemon['insecure-registries'] | default([],true)}}"
    insecure_registries: "{{ existing_daemon['insecure-registries'] | default([],true) | union(insecure_registries | default([],true)) }}"
  when: daemon_stat_result.stat.exists == True

- name: Registry | Add insecure registry
  set_fact:
    insecure_registries: "{{ insecure_registries|default([]) + [item] }}"
  loop: "{{ docker_insecure_registries | default([]) }}"
  when: item not in insecure_registries|default([])

- name: RADIUS | Creating new daemon json content
  set_fact:
    new_daemon: "{{ existing_daemon | combine({ 'insecure-registries': insecure_registries, 'log-driver': driver, 'log-opts': opts}) }}"
  when: existing_daemon

- name: RADIUS | Write output to Docker daemon.json
  copy:
    content: "{{ new_daemon | to_nice_json }}"
    dest: /etc/docker/daemon.json
    backup: true
  when: existing_daemon
